import sys
import os
import json
import logging
import bpy
import numpy as np
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer

sys.path.append(os.path.join(bpy.path.abspath("//"), "scripts"))

"""
@param bone: the bone object, obtained from armature.pose.bone["<bone_name>"]
@param rotation: rotation in quaternion (w, x, y, z)
"""
def setBoneRotation(bone, rotation):
    w, x, y, z = rotation
    bone.rotation_quaternion[0] = w
    bone.rotation_quaternion[1] = x
    bone.rotation_quaternion[2] = y
    bone.rotation_quaternion[3] = z

"""
a piece of math code copied from StackOverflow
https://stackoverflow.com/questions/39000758/how-to-multiply-two-quaternions-by-python-or-numpy

@param q1: in form (w, x, y, z)
@param q0: @see q1
"""
def multiplyQuaternion(q1, q0):
    w0, x0, y0, z0 = q0
    w1, x1, y1, z1 = q1
    return np.array([-x1 * x0 - y1 * y0 - z1 * z0 + w1 * w0,
                     x1 * w0 + y1 * z0 - z1 * y0 + w1 * x0,
                     -x1 * z0 + y1 * w0 + z1 * x0 + w1 * y0,
                     x1 * y0 - y1 * x0 + z1 * w0 + w1 * z0], dtype=np.float64)

# Resto del código...

# Clase del servidor HTTP para recibir los datos
class DataHandler(BaseHTTPRequestHandler):
    def _set_response(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)
        data = json.loads(post_data)

        # Procesar los datos recibidos
        process_received_data(data)

        self._set_response()

# Resto del código...

# Función para procesar los datos recibidos
def process_received_data(data):
    print("Datos recibidos:", data)
    # Realizar las operaciones necesarias con los datos recibidos

# Resto del código...

# Función para iniciar el servidor HTTP en Blender
def start_http_server():
    server_address = ('', 8000)  # Puedes cambiar el puerto si es necesario
    httpd = HTTPServer(server_address, DataHandler)
    print('Iniciando servidor HTTP en el puerto', server_address[1])
    httpd.serve_forever()

# Resto del código...

if __name__ == "__main__":
    try:
        logger = logging.getLogger("BPY")
        logger.setLevel(logging.DEBUG)

        if not logger.handlers:
            ch = logging.StreamHandler()
            ch.setStream(sys.stdout)
            ch.setLevel(logging.DEBUG)
            ch.setFormatter(logging.Formatter("%(asctime)s %(levelname)s [%(name)s]: %(message)s", datefmt="%Y-%m-%d %H:%M:%S"))
            logger.addHandler(ch)

        # get scene armature object
        armature = bpy.data.objects["Armature"]

        # get the bones we need
        bones = {
            "root": armature.pose.bones["root"],
            "lowerArm": armature.pose.bones["lower_arm"],
            "upperArm": armature.pose.bones["upper_arm"],
        }

        # start HTTP server in a separate thread
        http_thread = threading.Thread(target=start_http_server, daemon=True)
        http_thread.start()

        logger.info("Servidor HTTP iniciado en el puerto 8000")

        # Resto del código...

        logger.info("Todo iniciado.")
    except KeyboardInterrupt:
        logger.info("Interrupción de teclado recibida, deteniendo el servidor.")
